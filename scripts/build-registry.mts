// source: https://github.com/magicuidesign/magicui/blob/main/scripts/build-registry.mts

import { exec } from "node:child_process";
import { promises as fs } from "node:fs";
import path from "node:path";
import { rimraf } from "rimraf";
import type { Registry } from "shadcn/schema";
import { registryItemSchema } from "shadcn/schema";
import { z } from "zod";

import { examples } from "../src/registry/registry-examples";
import { lib } from "../src/registry/registry-lib";
import { ui } from "../src/registry/registry-ui";
import { hooks } from "../src/registry/reigstry-hooks";
import { css } from "../src/registry/registry-css";

const registry = {
  name: "Wednesday UI",
  homepage: "https://ui.ednesdayw.com",
  items: z.array(registryItemSchema).parse([
    {
      name: "index",
      type: "registry:style",
      dependencies: [
        "tailwindcss-animate",
        "class-variance-authority",
        "lucide-react",
      ],
      registryDependencies: ["utils"],
      tailwind: {
        config: {
          plugins: [`require("tailwindcss-animate")`],
        },
      },
      cssVars: {},
      files: [],
    },
    ...css,
    ...ui,
    ...hooks,
    ...examples,
    ...lib,
  ]),
} satisfies Registry;

async function buildRegistryIndex() {
  let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

// biome-ignore lint/suspicious/noExplicitAny: <explanation>
export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map((file) => `${file.path}`);
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/${item.files[0].path.replace("src/", "")}`
      : "";

    index += `
  "${item.name}": {
    name: ${JSON.stringify(item.name)},
    description: ${JSON.stringify(item.description ?? "")},
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `${typeof file === "string" ? file : file.path}`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "src/__registry__/index.tsx"));
  await fs.writeFile(
    path.join(process.cwd(), "src/__registry__/index.tsx"),
    index,
  );
}

async function buildRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // 2. Write the content of the registry to `registry.json`
  rimraf.sync(path.join(process.cwd(), "registry.json"));
  await fs.writeFile(
    path.join(process.cwd(), "registry.json"),
    JSON.stringify(fixedRegistry, null, 2),
  );
}

async function buildRegistry() {
  await new Promise((resolve, reject) => {
    const process = exec("npx shadcn build");

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });

  const files = await fs.readdir(path.join(process.cwd(), "public/r"));

  await Promise.all(
    files.map(async (file) => {
      const content = await fs.readFile(
        path.join(process.cwd(), "public/r", file),
        "utf-8",
      );

      const registryItem = JSON.parse(content);

      // Replace `@/registry` in files
      // biome-ignore lint/suspicious/noExplicitAny: <explanation>
      registryItem.files = registryItem.files?.map((file: any) => {
        if (file.content?.includes("@/registry/ui")) {
          file.content = file.content?.replaceAll(
            "@/registry/ui",
            "@/components/ui",
          );
        }
        if (file.content?.includes("@/registry")) {
          file.content = file.content?.replaceAll("@/registry", "@");
        }
        return file;
      });

      // Write the file back
      await fs.writeFile(
        path.join(process.cwd(), "public/r", file),
        JSON.stringify(registryItem, null, 2),
      );
    }),
  );
}

try {
  console.log("üóÇÔ∏è Building __registry__/index.tsx...");
  await buildRegistryIndex();

  console.log("üíÖ Building registry.json...");
  await buildRegistryJsonFile();

  console.log("üèóÔ∏è Building registry...");
  await buildRegistry();
} catch (error) {
  console.error(error);
  process.exit(1);
}
