{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create2",
  "type": "registry:lib",
  "dependencies": [
    "js-sha3"
  ],
  "files": [
    {
      "path": "src/registry/lib/create2.ts",
      "content": "import { keccak256 } from \"js-sha3\";\n\n/**\n * Minimal Proxy (EIP-1167) Bytecode Template\n * A minimal proxy contract that delegates all calls to the implementation contract\n */\nconst MIN_PROXY_BYTECODE_PREFIX = \"3d602d80600a3d3981f3363d3d373d3d3d363d73\";\nconst MIN_PROXY_BYTECODE_SUFFIX = \"5af43d82803e903d91602b57fd5bf3ff\";\n\ninterface Create2PredictAddressParams {\n  implementation: string;\n  deployer: string;\n  salt: string;\n}\n\nfunction isValidAddress(address: string): boolean {\n  if (address.length !== 42 || !address.startsWith(\"0x\")) {\n    return false;\n  }\n\n  const hex = address.slice(2);\n  return /^[0-9a-fA-F]{40}$/.test(hex);\n}\n\nfunction stringToHex(str: string, size: number): string {\n  const bytes = Buffer.from(str, \"utf8\");\n  if (bytes.length > size) {\n    throw new Error(`String is too long for size ${size}`);\n  }\n\n  const padded = Buffer.alloc(size);\n  bytes.copy(padded);\n\n  return padded.toString(\"hex\");\n}\n\nfunction getChecksumAddress(address: string) {\n  const addr = address.toLowerCase().replace(\"0x\", \"\");\n  const hash = keccak256(Buffer.from(addr, \"utf8\"));\n\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < addr.length; i++) {\n    const char = addr[i];\n    const hashChar = hash[i];\n\n    if (!char || !hashChar) continue;\n\n    const hashValue = Number.parseInt(hashChar, 16);\n\n    if (Number.parseInt(char, 16) >= 10) {\n      checksumAddress += hashValue >= 8 ? char.toUpperCase() : char;\n    } else {\n      checksumAddress += char;\n    }\n  }\n\n  return checksumAddress;\n}\n\nexport const predictDeterministicAddress = ({\n  implementation,\n  deployer,\n  salt,\n}: Create2PredictAddressParams) => {\n  if (!isValidAddress(implementation)) {\n    throw new Error(`Invalid implementation address: ${implementation}`);\n  }\n\n  if (!isValidAddress(deployer)) {\n    throw new Error(`Invalid deployer address: ${deployer}`);\n  }\n\n  if (salt.length > 32) {\n    throw new Error(`Salt must be less than 32 characters: ${salt}`);\n  }\n\n  const saltHex = stringToHex(salt, 32);\n  const cleanImplementation = implementation.slice(2).toLowerCase();\n  const cleanDeployer = deployer.slice(2).toLowerCase();\n\n  let bytecode = `${MIN_PROXY_BYTECODE_PREFIX}${cleanImplementation}${MIN_PROXY_BYTECODE_SUFFIX}${cleanDeployer}${saltHex}`;\n\n  const firstPart = bytecode.slice(0, 110);\n  const firstBytes = Buffer.from(firstPart, \"hex\");\n  const firstHash = keccak256(firstBytes);\n  bytecode += firstHash;\n\n  const secondPart = bytecode.slice(110, 280);\n  const secondBytes = Buffer.from(secondPart, \"hex\");\n  const secondHash = keccak256(secondBytes);\n\n  const addressHex = secondHash.slice(-40);\n\n  return getChecksumAddress(`0x${addressHex}`);\n};\n",
      "type": "registry:lib",
      "target": "lib/create2.ts"
    }
  ]
}