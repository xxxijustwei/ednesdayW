{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-input",
  "type": "registry:ui",
  "title": "Tag Input",
  "description": "A tag input component",
  "dependencies": [
    "@radix-ui/react-use-callback-ref"
  ],
  "registryDependencies": [
    "badge",
    "https://ui.ednesdayw.com/r/button.json"
  ],
  "files": [
    {
      "path": "src/registry/ui/tag-input.tsx",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport { XIcon } from \"lucide-react\";\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useRef,\n  useState,\n} from \"react\";\n\nconst stopPropagation = (e: React.MouseEvent<HTMLDivElement>) => {\n  e.stopPropagation();\n};\n\ntype TagInputContextType = {\n  values: string[];\n  onValuesChange: (values: string[]) => void;\n  onAddChip: (value: string | string[]) => void;\n  onDeleteChip: (value: string) => void;\n  size: \"sm\" | \"md\" | \"lg\";\n  disabled?: boolean;\n  invalid?: boolean;\n  confirmKey?: \"enter\" | \"space\";\n  pasteDelimiter?: string;\n  maxTags?: number;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  ref?: React.RefObject<HTMLInputElement | null>;\n};\n\nconst TagInputContext = createContext<TagInputContextType>({\n  values: [],\n  onValuesChange: () => {},\n  onAddChip: () => {},\n  onDeleteChip: () => {},\n  size: \"md\",\n  confirmKey: \"space\",\n  pasteDelimiter: undefined,\n  maxTags: undefined,\n});\n\nconst useTagInputContext = () => {\n  const context = useContext(TagInputContext);\n  if (!context) {\n    throw new Error(\"TagInput components must be used within TagInput\");\n  }\n  return context;\n};\n\ninterface TagInputProps extends React.ComponentProps<\"div\"> {\n  values: string[];\n  onValuesChange: (values: string[]) => void;\n  size: TagInputContextType[\"size\"];\n  disabled?: boolean;\n  invalid?: boolean;\n  confirmKey?: \"enter\" | \"space\";\n  pasteDelimiter?: string;\n  maxTags?: number;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  ref?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst TagInput = React.forwardRef<HTMLInputElement, TagInputProps>(\n  (\n    {\n      className,\n      values,\n      onValuesChange,\n      size,\n      disabled,\n      invalid,\n      onBlur,\n      confirmKey = \"space\",\n      pasteDelimiter,\n      maxTags,\n      children,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const ref = forwardedRef\n      ? (forwardedRef as React.RefObject<HTMLInputElement>)\n      : inputRef;\n\n    const handleValuesChange = useCallbackRef(onValuesChange);\n\n    const onDeleteChip = useCallback(\n      (value: string) => {\n        const changed = values.filter((v) => v !== value);\n        handleValuesChange(changed);\n      },\n      [values, handleValuesChange],\n    );\n\n    const onAddChip = useCallback(\n      (value: string | string[]) => {\n        const valuesToAdd = Array.isArray(value) ? value : [value];\n        const uniqueValues = valuesToAdd.filter(\n          (v) => v.trim() && !values.includes(v.trim()),\n        );\n        if (uniqueValues.length > 0) {\n          handleValuesChange([...values, ...uniqueValues]);\n        }\n      },\n      [values, handleValuesChange],\n    );\n\n    const contextValue = React.useMemo<TagInputContextType>(\n      () => ({\n        values,\n        onValuesChange: handleValuesChange,\n        onDeleteChip,\n        onAddChip,\n        size,\n        disabled,\n        invalid,\n        onBlur,\n        ref,\n        confirmKey,\n        pasteDelimiter,\n        maxTags: maxTags && maxTags > 0 ? maxTags : undefined,\n      }),\n      [\n        values,\n        handleValuesChange,\n        onDeleteChip,\n        onAddChip,\n        size,\n        disabled,\n        invalid,\n        onBlur,\n        ref,\n        confirmKey,\n        pasteDelimiter,\n        maxTags,\n      ],\n    );\n\n    return (\n      <TagInputContext.Provider value={contextValue}>\n        <div className={cn(\"flex flex-col gap-2\", className)} {...props}>\n          {children}\n        </div>\n      </TagInputContext.Provider>\n    );\n  },\n);\n\nTagInput.displayName = \"TagInput\";\n\nconst containerVariants = cva(\n  cn(\n    \"flex w-full relative rounded-md shadow-sm\",\n    \"text-base cursor-text\",\n    \"data-[is-invalid=true]:border-destructive\",\n    \"data-[disabled=true]:opacity-70 data-[disabled=true]:cursor-not-allowed\",\n    \"hover:border-ring focus-within:border-ring\",\n    \"transition-all duration-200\",\n  ),\n  {\n    variants: {\n      variant: {\n        default: \"bg-muted border-2 border-input\",\n        faded: cn(\n          \"bg-muted border-2 border-muted\",\n          \"hover:bg-accent hover:border-accent\",\n          \"focus-within:bg-accent focus-within:border-accent\",\n          \"data-[disabled=true]:hover:bg-muted data-[disabled=true]:hover:border-muted\",\n        ),\n        bordered: \"border-2 border-input\",\n        underline: \"border-b-2 border-input rounded-none shadow-none\",\n      },\n      size: {\n        sm: \"min-h-10 px-3 py-1.5\",\n        md: \"min-h-12 px-3 py-2\",\n        lg: \"min-h-13 px-3 py-2.5\",\n      },\n    },\n    compoundVariants: [\n      {\n        variant: \"underline\",\n        className: \"px-2\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  },\n);\n\ninterface TagInputContainerProps\n  extends React.ComponentProps<\"div\">,\n    Omit<VariantProps<typeof containerVariants>, \"size\"> {}\n\nconst TagInputContainer = ({\n  children,\n  variant,\n  className,\n  ...props\n}: TagInputContainerProps) => {\n  const { invalid, disabled, size, ref } = useTagInputContext();\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget && !disabled) {\n      ref?.current?.focus();\n    }\n  };\n\n  return (\n    <div\n      {...props}\n      aria-invalid={invalid}\n      aria-disabled={disabled}\n      data-is-invalid={invalid?.toString()}\n      data-disabled={disabled?.toString()}\n      className={cn(\n        containerVariants({ variant, size }),\n        \"flex-wrap gap-1.5\",\n        className,\n      )}\n      onClick={handleClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nTagInputContainer.displayName = \"TagInputContainer\";\n\ninterface TagInputBadgeProps extends React.ComponentProps<typeof Badge> {\n  value: string;\n}\n\nconst badgeVariants = cva(\"max-w-full\", {\n  variants: {\n    size: {\n      sm: \"text-sm h-6\",\n      md: \"text-base h-7\",\n      lg: \"text-lg h-7\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\nconst TagInputBadge = React.memo(\n  ({ children, value, className, ...props }: TagInputBadgeProps) => {\n    const { size, onDeleteChip } = useTagInputContext();\n\n    const handleDelete = useCallback(() => {\n      onDeleteChip(value);\n    }, [onDeleteChip, value]);\n\n    return (\n      <Badge\n        {...props}\n        className={cn(badgeVariants({ size }), className)}\n        onClick={stopPropagation}\n      >\n        {children}\n        <Button\n          aria-label={`Delete ${value}`}\n          title={`Delete ${value}`}\n          variant=\"ghost\"\n          size=\"icon\"\n          asChild\n          className=\"rounded-full size-4 text-white hover:text-white bg-accent-foreground hover:bg-foreground\"\n          onClick={handleDelete}\n        >\n          <div>\n            <XIcon className=\"shrink-0 scale-75\" />\n          </div>\n        </Button>\n      </Badge>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.value !== nextProps.value) return false;\n    if (prevProps.children !== nextProps.children) return false;\n    return true;\n  },\n);\n\nTagInputBadge.displayName = \"TagInputBadge\";\n\nconst inputVariants = cva(\n  cn(\n    \"flex-1 min-w-12 outline-none bg-transparent\",\n    \"placeholder:text-muted-foreground\",\n    \"disabled:cursor-not-allowed\",\n  ),\n  {\n    variants: {\n      size: {\n        sm: \"text-sm\",\n        md: \"text-base\",\n        lg: \"text-lg\",\n      },\n    },\n    defaultVariants: {\n      size: \"md\",\n    },\n  },\n);\n\ninterface TagInputBoxProps\n  extends Omit<\n      React.ComponentPropsWithoutRef<\"input\">,\n      \"onBlur\" | \"value\" | \"onChange\"\n    >,\n    Omit<VariantProps<typeof inputVariants>, \"size\"> {}\n\nconst TagInputBox = ({ className, onKeyDown, ...props }: TagInputBoxProps) => {\n  const {\n    values,\n    disabled,\n    size,\n    onAddChip,\n    onDeleteChip,\n    onBlur,\n    ref,\n    confirmKey,\n    pasteDelimiter,\n    maxTags,\n  } = useTagInputContext();\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const canAddMoreTags = maxTags === undefined || values.length < maxTags;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const shouldAddChip =\n      (confirmKey === \"space\" && e.key === \" \" && !e.nativeEvent.isComposing) ||\n      (confirmKey === \"enter\" &&\n        e.key === \"Enter\" &&\n        !e.nativeEvent.isComposing);\n\n    if (shouldAddChip) {\n      e.preventDefault();\n      if (inputValue.trim() && canAddMoreTags) {\n        onAddChip(inputValue);\n        setInputValue(\"\");\n      }\n      return;\n    }\n\n    if (e.key === \"Backspace\" && !inputValue && values.length > 0) {\n      const lastValue = values[values.length - 1];\n      onDeleteChip(lastValue);\n      return;\n    }\n\n    onKeyDown?.(e);\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    if (!pasteDelimiter) return;\n\n    e.preventDefault();\n    const pastedText = inputValue + e.clipboardData.getData(\"text\");\n    const items = pastedText\n      .split(pasteDelimiter)\n      .map((item) => item.trim())\n      .filter(Boolean);\n\n    if (items.length > 0) {\n      let itemsToAdd = items;\n\n      if (maxTags !== undefined) {\n        const remainingSlots = maxTags - values.length;\n        itemsToAdd = items.slice(0, remainingSlots);\n      }\n\n      onAddChip(itemsToAdd);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <input\n      {...props}\n      aria-label=\"Add new chip\"\n      name=\"chip-input\"\n      className={cn(inputVariants({ size }), className)}\n      value={inputValue}\n      onChange={(e) => setInputValue(e.target.value)}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      disabled={disabled}\n      onBlur={onBlur}\n      ref={ref}\n    />\n  );\n};\n\nTagInputBox.displayName = \"TagInputBox\";\n\nexport {\n  TagInput,\n  TagInputContainer,\n  TagInputBadge,\n  TagInputBox,\n  useTagInputContext,\n};\n",
      "type": "registry:ui",
      "target": "components/wed/tag-input.tsx"
    }
  ]
}