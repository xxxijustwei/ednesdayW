{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea",
  "type": "registry:ui",
  "title": "Textarea",
  "description": "A textarea component",
  "dependencies": [
    "react-textarea-autosize"
  ],
  "files": [
    {
      "path": "src/registry/ui/textarea.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport TextareaAutosize, {\n  TextareaAutosizeProps,\n} from \"react-textarea-autosize\";\n\ninterface TextareaContext {\n  ref?: React.RefObject<HTMLTextAreaElement | null>;\n  disabled?: boolean;\n}\n\nconst TextareaContext = React.createContext<TextareaContext>(\n  {} as TextareaContext,\n);\n\nconst useTextareaContext = () => {\n  const context = React.useContext(TextareaContext);\n  if (!context) {\n    throw new Error(\"Textarea must be used within TextareaContainer\");\n  }\n  return context;\n};\n\nexport const containerVariants = cva(\n  cn(\n    \"group flex flex-col gap-1 w-full h-fit px-2.5 py-2 relative rounded-md shadow-sm\",\n    \"text-base cursor-text\",\n    \"data-[is-invalid=true]:border-destructive\",\n    \"data-[disabled=true]:opacity-70 data-[disabled=true]:cursor-not-allowed data-[disabled=true]:hover:border-input\",\n    \"hover:border-ring focus-within:border-ring\",\n    \"transition-all duration-200\",\n  ),\n  {\n    variants: {\n      variant: {\n        default: \"bg-muted border-2 border-input\",\n        faded: cn(\n          \"bg-muted border-2 border-muted\",\n          \"hover:bg-accent hover:border-accent\",\n          \"focus-within:bg-accent focus-within:border-accent\",\n          \"data-[disabled=true]:hover:bg-muted data-[disabled=true]:hover:border-muted\",\n        ),\n        bordered: \"border-2 border-input\",\n        underline: \"border-b-2 border-input rounded-none shadow-none\",\n      },\n    },\n    compoundVariants: [\n      {\n        variant: \"underline\",\n        className: \"px-1\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\ninterface TextareaContainerProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof containerVariants> {\n  disabled?: boolean;\n}\n\nconst TextareaContainer = React.forwardRef<\n  HTMLTextAreaElement,\n  TextareaContainerProps\n>(\n  (\n    { className, \"aria-invalid\": ariaInvalid, disabled, variant, ...props },\n    ref,\n  ) => {\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    React.useImperativeHandle(ref, () => textareaRef.current!);\n    return (\n      <TextareaContext.Provider value={{ ref: textareaRef, disabled }}>\n        <div\n          className={cn(containerVariants({ variant }), className)}\n          data-is-invalid={ariaInvalid?.toString()}\n          data-disabled={disabled?.toString()}\n          onClick={() => {\n            if (!disabled && textareaRef.current) {\n              textareaRef.current.focus();\n            }\n          }}\n          {...props}\n        />\n      </TextareaContext.Provider>\n    );\n  },\n);\n\nTextareaContainer.displayName = \"TextareaContainer\";\n\nconst TextareaLabel = ({\n  htmlFor,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"label\">) => {\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={cn(\n        \"text-sm text-accent-foreground/70 origin-top-left\",\n        \"transition-all duration-200\",\n        \"group-data-[is-invalid=true]:text-destructive\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </label>\n  );\n};\n\ninterface TextareaProps\n  extends Omit<TextareaAutosizeProps, \"disabled\" | \"aria-invalid\"> {\n  disableResize?: boolean;\n}\n\nconst Textarea = ({\n  className,\n  placeholder,\n  minRows,\n  maxRows,\n  disableResize,\n  ...props\n}: TextareaProps) => {\n  const { ref, disabled } = useTextareaContext();\n\n  return (\n    <div className=\"inline-flex w-full items-start relative\">\n      <TextareaAutosize\n        ref={ref}\n        className={cn(\n          \"w-full min-h-[48px] outline-hidden bg-transparent\",\n          \"disabled:cursor-not-allowed placeholder:text-muted-foreground\",\n          disableResize ? \"resize-none\" : \"resize-y\",\n          className,\n        )}\n        disabled={disabled}\n        placeholder={placeholder}\n        minRows={minRows || 2}\n        maxRows={maxRows || 4}\n        {...props}\n      />\n    </div>\n  );\n};\n\nTextarea.displayName = \"Textarea\";\n\nexport {\n  Textarea,\n  TextareaContainer,\n  TextareaLabel,\n  type TextareaProps,\n  type TextareaContainerProps,\n  useTextareaContext,\n};\n",
      "type": "registry:ui",
      "target": "components/wed/textarea.tsx"
    }
  ]
}