{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autocomplete-form-demo",
  "type": "registry:component",
  "title": "Autocomplete Form Demo",
  "description": "A demo of the autocomplete form",
  "dependencies": [
    "https://ui.ednesdayw.com/r/autocomplete.json"
  ],
  "files": [
    {
      "path": "src/registry/example/autocomplete/form.tsx",
      "content": "import {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n} from \"@/components/ui/card\";\nimport {\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from \"@/components/ui/form\";\nimport { Form } from \"@/components/ui/form\";\nimport {\n    Autocomplete,\n    AutocompleteContent,\n    AutocompleteEmpty,\n    AutocompleteInput,\n    AutocompleteItem,\n} from \"@/components/ui/autocomplete\";\nimport { Button } from \"@/components/ui/button\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nconst formSchema = z.object({\n    country: z.string().nonempty({\n        message: \"Country is required\",\n    }),\n});\n\nexport const AutocompleteFormExample = () => {\n    const form = useForm<z.infer<typeof formSchema>>({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            country: \"\",\n        },\n    });\n\n    const onSubmit = async (values: z.infer<typeof formSchema>) => {\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        toast.success(\"Submit Successfully\");\n    };\n\n    return (\n        <Card className=\"w-full max-w-sm\">\n            <CardHeader>\n                <CardTitle>Autocomplete Form</CardTitle>\n                <CardDescription>\n                    Enjoy the best experience with us\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(onSubmit)}\n                        className=\"space-y-2\"\n                    >\n                        <FormField\n                            control={form.control}\n                            name=\"country\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>Country</FormLabel>\n                                    <FormControl>\n                                        <Autocomplete\n                                            value={field.value}\n                                            onChange={field.onChange}\n                                        >\n                                            <AutocompleteInput\n                                                variant=\"bordered\"\n                                                placeholder=\"Select a country\"\n                                                startContent={\n                                                    field.value && (\n                                                        <span>\n                                                            {\n                                                                countries.find(\n                                                                    ({ key }) =>\n                                                                        key ===\n                                                                        field.value,\n                                                                )?.flag\n                                                            }\n                                                        </span>\n                                                    )\n                                                }\n                                            />\n                                            <AutocompleteContent className=\"max-h-48\">\n                                                {countries.map(\n                                                    ({ key, flag, label }) => (\n                                                        <AutocompleteItem\n                                                            key={key}\n                                                            value={key}\n                                                            label={label}\n                                                        >\n                                                            <span className=\"text-base text-foreground\">\n                                                                {`${flag} ${label}`}\n                                                            </span>\n                                                        </AutocompleteItem>\n                                                    ),\n                                                )}\n                                                <AutocompleteEmpty>\n                                                    No results.\n                                                </AutocompleteEmpty>\n                                            </AutocompleteContent>\n                                        </Autocomplete>\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <div className=\"flex justify-end pt-2\">\n                            <Button\n                                type=\"submit\"\n                                loading={form.formState.isSubmitting}\n                            >\n                                Submit\n                            </Button>\n                        </div>\n                    </form>\n                </Form>\n            </CardContent>\n        </Card>\n    );\n};\n\nconst countries = [\n    { key: \"cn\", flag: \"ðŸ‡¨ðŸ‡³\", label: \"China\" },\n    { key: \"jp\", flag: \"ðŸ‡¯ðŸ‡µ\", label: \"Japan\" },\n    { key: \"kr\", flag: \"ðŸ‡°ðŸ‡·\", label: \"Korea\" },\n    { key: \"ru\", flag: \"ðŸ‡·ðŸ‡º\", label: \"Russia\" },\n    { key: \"in\", flag: \"ðŸ‡®ðŸ‡³\", label: \"India\" },\n    { key: \"br\", flag: \"ðŸ‡§ðŸ‡·\", label: \"Brazil\" },\n    { key: \"de\", flag: \"ðŸ‡©ðŸ‡ª\", label: \"Germany\" },\n    { key: \"fr\", flag: \"ðŸ‡«ðŸ‡·\", label: \"France\" },\n    { key: \"it\", flag: \"ðŸ‡®ðŸ‡¹\", label: \"Italy\" },\n    { key: \"es\", flag: \"ðŸ‡ªðŸ‡¸\", label: \"Spain\" },\n    { key: \"us\", flag: \"ðŸ‡ºðŸ‡¸\", label: \"United States\" },\n    { key: \"ca\", flag: \"ðŸ‡¨ðŸ‡¦\", label: \"Canada\" },\n    { key: \"mx\", flag: \"ðŸ‡²ðŸ‡½\", label: \"Mexico\" },\n    { key: \"gb\", flag: \"ðŸ‡¬ðŸ‡§\", label: \"United Kingdom\" },\n    { key: \"au\", flag: \"ðŸ‡¦ðŸ‡º\", label: \"Australia\" },\n    { key: \"nz\", flag: \"ðŸ‡³ðŸ‡¿\", label: \"New Zealand\" },\n];\n",
      "type": "registry:component",
      "target": "components/autocomplete-form-demo.tsx"
    }
  ]
}