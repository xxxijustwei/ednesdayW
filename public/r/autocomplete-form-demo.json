{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autocomplete-form-demo",
  "type": "registry:component",
  "title": "Autocomplete Form Demo",
  "description": "A demo of the autocomplete form",
  "registryDependencies": [
    "https://ui.ednesdayw.com/r/autocomplete.json"
  ],
  "files": [
    {
      "path": "src/registry/example/autocomplete/form.tsx",
      "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Form } from \"@/components/ui/form\";\nimport {\n  Autocomplete,\n  AutocompleteContent,\n  AutocompleteEmpty,\n  AutocompleteInput,\n  AutocompleteItem,\n} from \"@/components/ui/autocomplete\";\nimport { Button } from \"@/components/ui/button\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nconst formSchema = z.object({\n  country: z.string().nonempty({\n    message: \"Country is required\",\n  }),\n});\n\nexport const AutocompleteFormExample = () => {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      country: \"\",\n    },\n  });\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    await new Promise((resolve) => setTimeout(resolve, 300));\n    toast.success(\"Submit Successfully\");\n  };\n\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader>\n        <CardTitle>Autocomplete Form</CardTitle>\n        <CardDescription>Enjoy the best experience with us</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-2\">\n            <FormField\n              control={form.control}\n              name=\"country\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Country</FormLabel>\n                  <FormControl>\n                    <Autocomplete value={field.value} onChange={field.onChange}>\n                      <AutocompleteInput\n                        variant=\"bordered\"\n                        placeholder=\"Select a country\"\n                        startContent={\n                          field.value && (\n                            <span>\n                              {\n                                countries.find(({ key }) => key === field.value)\n                                  ?.flag\n                              }\n                            </span>\n                          )\n                        }\n                      />\n                      <AutocompleteContent className=\"max-h-48\">\n                        {countries.map(({ key, flag, label }) => (\n                          <AutocompleteItem key={key} value={key} label={label}>\n                            <span className=\"text-base text-foreground\">\n                              {`${flag} ${label}`}\n                            </span>\n                          </AutocompleteItem>\n                        ))}\n                        <AutocompleteEmpty>No results.</AutocompleteEmpty>\n                      </AutocompleteContent>\n                    </Autocomplete>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex justify-end pt-2\">\n              <Button type=\"submit\" loading={form.formState.isSubmitting}>\n                Submit\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst countries = [\n  { key: \"cn\", flag: \"ğŸ‡¨ğŸ‡³\", label: \"China\" },\n  { key: \"jp\", flag: \"ğŸ‡¯ğŸ‡µ\", label: \"Japan\" },\n  { key: \"kr\", flag: \"ğŸ‡°ğŸ‡·\", label: \"Korea\" },\n  { key: \"ru\", flag: \"ğŸ‡·ğŸ‡º\", label: \"Russia\" },\n  { key: \"in\", flag: \"ğŸ‡®ğŸ‡³\", label: \"India\" },\n  { key: \"br\", flag: \"ğŸ‡§ğŸ‡·\", label: \"Brazil\" },\n  { key: \"de\", flag: \"ğŸ‡©ğŸ‡ª\", label: \"Germany\" },\n  { key: \"fr\", flag: \"ğŸ‡«ğŸ‡·\", label: \"France\" },\n  { key: \"it\", flag: \"ğŸ‡®ğŸ‡¹\", label: \"Italy\" },\n  { key: \"es\", flag: \"ğŸ‡ªğŸ‡¸\", label: \"Spain\" },\n  { key: \"us\", flag: \"ğŸ‡ºğŸ‡¸\", label: \"United States\" },\n  { key: \"ca\", flag: \"ğŸ‡¨ğŸ‡¦\", label: \"Canada\" },\n  { key: \"mx\", flag: \"ğŸ‡²ğŸ‡½\", label: \"Mexico\" },\n  { key: \"gb\", flag: \"ğŸ‡¬ğŸ‡§\", label: \"United Kingdom\" },\n  { key: \"au\", flag: \"ğŸ‡¦ğŸ‡º\", label: \"Australia\" },\n  { key: \"nz\", flag: \"ğŸ‡³ğŸ‡¿\", label: \"New Zealand\" },\n];\n",
      "type": "registry:component",
      "target": "components/autocomplete-form-demo.tsx"
    }
  ]
}