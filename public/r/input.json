{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "title": "Input",
  "description": "A input component",
  "files": [
    {
      "path": "src/registry/ui/input.tsx",
      "content": "'use client'\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\";\n\nconst containerVariants = cva(\n    \"flex w-full rounded-md text-base relative cursor-text data-[is-invalid=true]:border-destructive transition-all duration-200\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-input border-2 border-input\",\n                bordered: \"border-2 border-input focus-within:border-ring\",\n                underline: \"border-b-2 border-input rounded-none focus-within:border-ring\",\n            },\n            size: {\n                sm: \"h-10 min-h-8 px-3 py-1.5\",\n                md: \"h-12 min-h-10 px-3 py-2\",\n                lg: \"h-14 min-h-12 px-3 py-2.5\",\n            },\n        },\n        compoundVariants: [\n            {\n                variant: \"underline\",\n                className: \"px-0.5\"\n            }\n        ],\n        defaultVariants: {\n            variant: \"default\",\n            size: \"md\",\n        },\n    },\n);\n\nconst inputVariants = cva(\n    \"w-full h-full outline-none disabled:cursor-not-allowed bg-transparent\",\n    {\n        variants: {\n            size: {\n                sm: \"text-sm\",\n                md: \"text-base\",\n                lg: \"text-lg\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    },\n);\n\ninterface InputProps\n    extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    VariantProps<typeof containerVariants> {\n    inputClassName?: string;\n    size?: \"sm\" | \"md\" | \"lg\";\n    isInvalid?: boolean;\n    startContent?: React.ReactNode;\n    endContent?: React.ReactNode;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n    ({ className, inputClassName, type, placeholder, value, variant, size, isInvalid, disabled, onFocus, onBlur, onChange, startContent, endContent, ...props }, ref) => {\n        const containerRef = React.useRef<HTMLDivElement>(null);\n        const inputRef = React.useRef<HTMLInputElement>(null);\n\n        const [showPassword, setShowPassword] = React.useState(false);\n        \n        const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n            containerRef.current?.setAttribute('data-focus', 'true');\n            onFocus?.(e);\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            containerRef.current?.setAttribute('data-focus', 'false');\n            onBlur?.(e);\n        };\n\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            containerRef.current?.setAttribute('data-is-fill', (!!e.target.value).toString());\n            onChange?.(e);\n        };\n\n        const endContentRender = () => {\n            if (endContent) {\n                return endContent;\n            }\n\n            if (type === \"password\") {\n                return (\n                    <button\n                        aria-label=\"Change password visibility\"\n                        type=\"button\"\n                        className=\"cursor-pointer\"\n                        onClick={() => setShowPassword(!showPassword)}\n                    >\n                        {!showPassword ? (\n                            <EyeOffIcon size={20} />\n                        ) : (\n                            <EyeIcon size={20} />\n                        )}\n                    </button>\n                );\n            }\n\n            return null;\n        }\n\n        React.useEffect(() => {\n            if (containerRef.current && inputRef.current) {\n                containerRef.current.setAttribute(\n                    'data-is-fill',\n                    (!!inputRef.current.value).toString()\n                );\n            }\n        }, [value]);\n\n        return (\n            <div\n                ref={containerRef}\n                className={cn(\n                    containerVariants({ variant, size }),\n                    \"group flex items-center justify-center gap-1.5\",\n                    className\n                )}\n                onClick={() => {\n                    inputRef.current?.focus();\n                }}\n                data-focus=\"false\"\n                data-is-fill=\"false\"\n                data-is-invalid={isInvalid?.toString()}\n            >\n                {startContent && (\n                    startContent\n                )}\n                <div className={\n                    cn(\n                        \"inline-flex w-full items-end h-full relative\",\n                        disabled && \"opacity-50\"\n                    )\n                }>\n                    <input\n                        type={type === \"password\" && endContent === undefined && showPassword ? \"text\" : type}\n                        ref={(node) => {\n                            inputRef.current = node;\n                            if (typeof ref === 'function') {\n                                ref(node);\n                            } else if (ref) {\n                                ref.current = node;\n                            }\n                        }}\n                        className={cn(inputVariants({ size }), inputClassName)}\n                        value={value}\n                        disabled={disabled}\n                        placeholder={placeholder}\n                        onFocus={(e) => handleFocus(e)}\n                        onBlur={(e) => handleBlur(e)}\n                        onChange={handleChange}\n                        {...props}\n                    />\n                </div>\n                {endContentRender()}\n            </div>\n        )\n    }\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, type InputProps }",
      "type": "registry:ui",
      "target": "components/ednesdayw/input.tsx"
    }
  ]
}