{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-phone-input-demo",
  "type": "registry:example",
  "title": "Input Phone Input Demo",
  "description": "A demo of the input phone input",
  "registryDependencies": [
    "https://ui.ednesdayw.com/r/input.json"
  ],
  "files": [
    {
      "path": "src/registry/example/input/phone-input.tsx",
      "content": "\"use client\";\n\nimport {\n    Popover,\n    PopoverContent,\n    PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/registry/ui/input\";\nimport { Check, ChevronDown } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface Country {\n    name: string;\n    flag: string;\n    dialCode: string;\n}\n\nconst countries: Country[] = [\n    { name: \"Hong Kong\", flag: \"ðŸ‡­ðŸ‡°\", dialCode: \"+852\" },\n    { name: \"United States\", flag: \"ðŸ‡ºðŸ‡¸\", dialCode: \"+1\" },\n    { name: \"United Kingdom\", flag: \"ðŸ‡¬ðŸ‡§\", dialCode: \"+44\" },\n    { name: \"Australia\", flag: \"ðŸ‡¦ðŸ‡º\", dialCode: \"+61\" },\n    { name: \"Germany\", flag: \"ðŸ‡©ðŸ‡ª\", dialCode: \"+49\" },\n    { name: \"France\", flag: \"ðŸ‡«ðŸ‡·\", dialCode: \"+33\" },\n    { name: \"Canada\", flag: \"ðŸ‡¨ðŸ‡¦\", dialCode: \"+1\" },\n    { name: \"China\", flag: \"ðŸ‡¨ðŸ‡³\", dialCode: \"+86\" },\n    { name: \"Japan\", flag: \"ðŸ‡¯ðŸ‡µ\", dialCode: \"+81\" },\n    { name: \"India\", flag: \"ðŸ‡®ðŸ‡³\", dialCode: \"+91\" },\n    { name: \"Brazil\", flag: \"ðŸ‡§ðŸ‡·\", dialCode: \"+55\" },\n    { name: \"South Korea\", flag: \"ðŸ‡°ðŸ‡·\", dialCode: \"+82\" },\n    { name: \"Russia\", flag: \"ðŸ‡·ðŸ‡º\", dialCode: \"+7\" },\n    { name: \"Mexico\", flag: \"ðŸ‡²ðŸ‡½\", dialCode: \"+52\" },\n    { name: \"Spain\", flag: \"ðŸ‡ªðŸ‡¸\", dialCode: \"+34\" },\n    { name: \"Italy\", flag: \"ðŸ‡®ðŸ‡¹\", dialCode: \"+39\" },\n    { name: \"Singapore\", flag: \"ðŸ‡¸ðŸ‡¬\", dialCode: \"+65\" },\n    { name: \"Netherlands\", flag: \"ðŸ‡³ðŸ‡±\", dialCode: \"+31\" },\n    { name: \"Sweden\", flag: \"ðŸ‡¸ðŸ‡ª\", dialCode: \"+46\" },\n    { name: \"Switzerland\", flag: \"ðŸ‡¨ðŸ‡­\", dialCode: \"+41\" },\n];\n\nexport const PhoneInputExample = () => {\n    return (\n        <div className=\"flex flex-col gap-4 w-full max-w-sm\">\n            <PhoneInput />\n            <BorderedPhoneInput />\n            <UnderlinePhoneInput />\n        </div>\n    );\n};\n\ninterface PhoneInputProps {\n    value?: string;\n    onChange?: (value: string) => void;\n}\n\nconst PhoneInput = ({ value, onChange }: PhoneInputProps) => {\n    const [country, setCountry] = useState(countries[0]);\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            const match = value.match(/^\\+\\d{1,3}\\s\\d{7,14}$/);\n            if (match) {\n                const [dialCode, phoneNumber] = match[0].split(\" \");\n                setCountry(\n                    countries.find((c) => c.dialCode === dialCode) ||\n                        countries[0],\n                );\n                setPhoneNumber(phoneNumber);\n            }\n        }\n    }, []);\n\n    const handleCountrySelect = (country: Country) => {\n        setCountry(country);\n        setIsOpen(false);\n        onChange?.(`${country.dialCode} ${phoneNumber}`);\n    };\n\n    const handlePhoneNumberChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        const newNumber = e.target.value;\n        if (newNumber !== \"\" && !/^[0-9]+$/.test(newNumber)) {\n            return;\n        }\n        setPhoneNumber(newNumber);\n        onChange?.(`${country.dialCode} ${newNumber}`);\n    };\n\n    return (\n        <Input\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            placeholder=\"Enter phone number\"\n            startContent={\n                <div className=\"h-full flex items-center\">\n                    <Popover open={isOpen} onOpenChange={setIsOpen}>\n                        <PopoverTrigger asChild>\n                            <button\n                                type=\"button\"\n                                className=\"flex items-center justify-between gap-1 text-sm cursor-pointer\"\n                            >\n                                <div className=\"flex items-center gap-1\">\n                                    <span className=\"text-base\">\n                                        {country.flag}\n                                    </span>\n                                    <span className=\"font-medium\">\n                                        {country.dialCode}\n                                    </span>\n                                </div>\n                                <ChevronDown className=\"w-4 h-4 ml-1 text-muted-foreground\" />\n                            </button>\n                        </PopoverTrigger>\n                        <PopoverContent\n                            className=\"w-64 p-0\"\n                            align=\"start\"\n                            side=\"bottom\"\n                            sideOffset={16}\n                            alignOffset={-12}\n                            avoidCollisions={true}\n                        >\n                            <div className=\"max-h-[300px] overflow-y-auto\">\n                                {countries.map((item, index) => (\n                                    <button\n                                        key={index}\n                                        type=\"button\"\n                                        className=\"flex items-center w-full px-4 py-2 text-sm hover:bg-muted\"\n                                        onClick={() =>\n                                            handleCountrySelect(item)\n                                        }\n                                    >\n                                        <span className=\"mr-2 text-base\">\n                                            {item.flag}\n                                        </span>\n                                        <span className=\"flex-1 text-left\">\n                                            {item.name}\n                                        </span>\n                                        <span className=\"text-muted-foreground\">\n                                            {item.dialCode}\n                                        </span>\n                                        {item.dialCode === country.dialCode && (\n                                            <Check className=\"w-4 h-4 ml-2 text-primary\" />\n                                        )}\n                                    </button>\n                                ))}\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                    <div className=\"h-full border-r py-1 pl-1.5\" />\n                </div>\n            }\n        />\n    );\n};\n\nconst BorderedPhoneInput = ({ value, onChange }: PhoneInputProps) => {\n    const [country, setCountry] = useState(countries[0]);\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            const match = value.match(/^\\+\\d{1,3}\\s\\d{7,14}$/);\n            if (match) {\n                const [dialCode, phoneNumber] = match[0].split(\" \");\n                setCountry(\n                    countries.find((c) => c.dialCode === dialCode) ||\n                        countries[0],\n                );\n                setPhoneNumber(phoneNumber);\n            }\n        }\n    }, []);\n\n    const handleCountrySelect = (country: Country) => {\n        setCountry(country);\n        setIsOpen(false);\n        onChange?.(`${country.dialCode} ${phoneNumber}`);\n    };\n\n    const handlePhoneNumberChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        const newNumber = e.target.value;\n        if (newNumber !== \"\" && !/^[0-9]+$/.test(newNumber)) {\n            return;\n        }\n        setPhoneNumber(newNumber);\n        onChange?.(`${country.dialCode} ${newNumber}`);\n    };\n\n    return (\n        <Input\n            variant=\"bordered\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            placeholder=\"Enter phone number\"\n            startContent={\n                <div className=\"h-full flex items-center\">\n                    <Popover open={isOpen} onOpenChange={setIsOpen}>\n                        <PopoverTrigger asChild>\n                            <button\n                                type=\"button\"\n                                className=\"flex items-center justify-between gap-1 text-sm cursor-pointer\"\n                            >\n                                <div className=\"flex items-center gap-1\">\n                                    <span className=\"text-base\">\n                                        {country.flag}\n                                    </span>\n                                    <span className=\"font-medium\">\n                                        {country.dialCode}\n                                    </span>\n                                </div>\n                                <ChevronDown className=\"w-4 h-4 ml-1 text-muted-foreground\" />\n                            </button>\n                        </PopoverTrigger>\n                        <PopoverContent\n                            className=\"w-64 p-0\"\n                            align=\"start\"\n                            side=\"bottom\"\n                            sideOffset={16}\n                            alignOffset={-12}\n                            avoidCollisions={true}\n                        >\n                            <div className=\"max-h-[300px] overflow-y-auto\">\n                                {countries.map((item, index) => (\n                                    <button\n                                        key={index}\n                                        type=\"button\"\n                                        className=\"flex items-center w-full px-4 py-2 text-sm hover:bg-muted\"\n                                        onClick={() =>\n                                            handleCountrySelect(item)\n                                        }\n                                    >\n                                        <span className=\"mr-2 text-base\">\n                                            {item.flag}\n                                        </span>\n                                        <span className=\"flex-1 text-left\">\n                                            {item.name}\n                                        </span>\n                                        <span className=\"text-muted-foreground\">\n                                            {item.dialCode}\n                                        </span>\n                                        {item.dialCode === country.dialCode && (\n                                            <Check className=\"w-4 h-4 ml-2 text-primary\" />\n                                        )}\n                                    </button>\n                                ))}\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                    <div className=\"h-full border-r py-1 pl-1.5\" />\n                </div>\n            }\n        />\n    );\n};\n\nconst UnderlinePhoneInput = ({ value, onChange }: PhoneInputProps) => {\n    const [country, setCountry] = useState(countries[0]);\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        if (value) {\n            const match = value.match(/^\\+\\d{1,3}\\s\\d{7,14}$/);\n            if (match) {\n                const [dialCode, phoneNumber] = match[0].split(\" \");\n                setCountry(\n                    countries.find((c) => c.dialCode === dialCode) ||\n                        countries[0],\n                );\n                setPhoneNumber(phoneNumber);\n            }\n        }\n    }, []);\n\n    const handleCountrySelect = (country: Country) => {\n        setCountry(country);\n        setIsOpen(false);\n        onChange?.(`${country.dialCode} ${phoneNumber}`);\n    };\n\n    const handlePhoneNumberChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        const newNumber = e.target.value;\n        if (newNumber !== \"\" && !/^[0-9]+$/.test(newNumber)) {\n            return;\n        }\n        setPhoneNumber(newNumber);\n        onChange?.(`${country.dialCode} ${newNumber}`);\n    };\n\n    return (\n        <Input\n            variant=\"underline\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            placeholder=\"Enter phone number\"\n            startContent={\n                <div className=\"h-full flex items-center\">\n                    <Popover open={isOpen} onOpenChange={setIsOpen}>\n                        <PopoverTrigger asChild>\n                            <button\n                                type=\"button\"\n                                className=\"flex items-center justify-between gap-1 text-sm cursor-pointer\"\n                            >\n                                <div className=\"flex items-center gap-1\">\n                                    <span className=\"text-base\">\n                                        {country.flag}\n                                    </span>\n                                    <span className=\"font-medium\">\n                                        {country.dialCode}\n                                    </span>\n                                </div>\n                                <ChevronDown className=\"w-4 h-4 ml-1 text-muted-foreground\" />\n                            </button>\n                        </PopoverTrigger>\n                        <PopoverContent\n                            className=\"w-64 p-0\"\n                            align=\"start\"\n                            side=\"bottom\"\n                            sideOffset={16}\n                            alignOffset={-4}\n                            avoidCollisions={true}\n                        >\n                            <div className=\"max-h-[300px] overflow-y-auto\">\n                                {countries.map((item, index) => (\n                                    <button\n                                        key={index}\n                                        type=\"button\"\n                                        className=\"flex items-center w-full px-4 py-2 text-sm hover:bg-muted\"\n                                        onClick={() =>\n                                            handleCountrySelect(item)\n                                        }\n                                    >\n                                        <span className=\"mr-2 text-base\">\n                                            {item.flag}\n                                        </span>\n                                        <span className=\"flex-1 text-left\">\n                                            {item.name}\n                                        </span>\n                                        <span className=\"text-muted-foreground\">\n                                            {item.dialCode}\n                                        </span>\n                                        {item.dialCode === country.dialCode && (\n                                            <Check className=\"w-4 h-4 ml-2 text-primary\" />\n                                        )}\n                                    </button>\n                                ))}\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                    <div className=\"h-full border-r py-1 pl-1.5\" />\n                </div>\n            }\n        />\n    );\n};\n",
      "type": "registry:example",
      "target": "components/ednesdayw/input-phone-input-demo.tsx"
    }
  ]
}